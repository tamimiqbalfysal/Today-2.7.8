rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the requesting user is an admin.
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Anyone can read a user's public profile.
      allow read: if true;
      // Only the user themselves can create their document or make updates.
      allow create, update: if request.auth.uid == userId;
      // Users cannot delete their own accounts directly through a client request for security.
      allow delete: if false;

      // Subcollection for user notifications
      match /notifications/{notificationId} {
        allow read, update: if request.auth.uid == userId;
      }
      
      // Subcollection for giveaway history
      match /giveawayHistory/{historyId} {
        allow read: if request.auth.uid == userId;
      }
    }

    // Rules for the 'usernames' collection to ensure uniqueness
    match /usernames/{username} {
      // Anyone can check if a username exists.
      allow read: if true;
      // Only authenticated users can create a username document during signup.
      allow create: if request.auth != null;
       // No one can update or delete a username document to maintain integrity.
      allow update, delete: if false;
    }

    // Rules for the main 'posts' collection (products, etc.)
    match /posts/{postId} {
      // Anyone can read any post/product.
      allow read: if true;
      // Users can only create posts for themselves.
      allow create: if request.auth.uid == request.resource.data.authorId;
      // Users can update their own posts, and admins can update any post.
      allow update: if request.auth.uid == resource.data.authorId || isAdmin();
      // Users can delete their own posts, and admins can delete any post.
      allow delete: if request.auth.uid == resource.data.authorId || isAdmin();

      // Subcollection for reviews on a post
      match /reviews/{reviewId} {
        // Anyone can read reviews.
        allow read: if true;
        // Only authenticated users can create a review.
        allow create: if request.auth != null;
      }
      
      // Subcollection for pre-orders on a product
      match /preorders/{preorderId} {
        // Allow anyone to create and read pre-orders.
        allow read, create: if true;
      }
    }

    // Rules for 'giftCodes'
    match /giftCodes/{code} {
      // Any authenticated user can read and update (redeem) a gift code.
      // List allows counting the total codes.
      allow read, update, list: if request.auth != null || isAdmin();
      // Only admins can create or delete gift codes.
      allow create, delete: if isAdmin();
    }
    
    // Rules for 'thinkCodes'
    match /thinkCodes/{code} {
      // Any authenticated user can read and update (redeem) a think code.
      allow read, update: if request.auth != null;
      // Only admins can create or delete codes.
      allow create, delete: if isAdmin();
    }
    
    // Rules for 'courseAdmin' settings
    match /courseAdmin/{docId} {
      // Anyone can read course details.
      allow read: if true;
      // Only admins can change course settings.
      allow write: if isAdmin();
    }

    // Rules for 'think_free_class_registrations'
    match /think_free_class_registrations/{registrationId} {
        // Allow anyone to register for the class.
        allow create: if true;
        // Only allow users to read their own registration status.
        allow read: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Rules for 'finditItems'
    match /finditItems/{itemId} {
      // Anyone can read lost and found items.
      allow read: if true;
      // Authenticated users can create new items.
      allow create: if request.auth != null;
      // Only the author of an item can delete it.
      allow delete: if request.auth.uid == resource.data.authorId;
    }
    
    // Rules for 'chats'
    match /chats/{chatId} {
      // A user can read or write to a chat only if they are a participant.
      allow read, write: if request.auth.uid in resource.data.participants;
      
      // Subcollection for messages within a chat
      match /messages/{messageId} {
        // A user can read or write messages only if they are a participant of the parent chat.
        allow read, write: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
      }
    }
    
    // Rules for 'gigs' (freelance marketplace)
    match /gigs/{gigId} {
      // Anyone can read gig listings.
      allow read: if true;
      // A user can only create a gig for themselves.
      allow create: if request.auth.uid == request.resource.data.sellerId;
    }
    
    // Rules for 'bloodRequests'
    match /bloodRequests/{requestId} {
        // Anyone can read blood requests.
        allow read: if true;
        // Only authenticated users can create requests.
        allow create: if request.auth != null;
        // Only the author can delete their own request.
        allow delete: if request.auth.uid == resource.data.authorId;
    }
    
    // Rules for 'admins' collection
    match /admins/{adminId} {
        // Only other admins can manage the admin list.
        allow read, write, list: if isAdmin();
    }
  }
}