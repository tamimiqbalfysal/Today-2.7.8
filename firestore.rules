rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // Default deny all reads/writes
    match /{document=**} {
      allow read, write: if false;
    }
    
    match /admins/{userId} {
      allow list, read: if isAdmin();
      // Allow the primary admin to create their own document, or other admins to add/remove admins.
      allow write: if (request.auth.uid == userId && request.auth.token.email == 'tamimiqbal.fysal@gmail.com') || isAdmin();
    }

    // Allow anyone to read usernames for validation
    match /usernames/{username} {
      allow get;
      allow create: if request.auth != null;
    }

    // Allow users to get any user document.
    // Allow users to update their own document, or update another user's `followers` list.
    match /users/{userId} {
      allow get: if request.auth != null;
      allow update: if request.auth != null && (
        // Allow users to update their own profile freely
        request.auth.uid == userId ||
        // Allow users to add/remove themselves from another user's followers list
        request.resource.data.followers.hasAny([request.auth.uid]) ||
        !request.resource.data.followers.hasAny([request.auth.uid])
      );
      // Allow users to create their own user document on signup
      allow create: if request.auth != null && request.auth.uid == userId;
    }

    // Allow anyone to read posts, but only the author can manage them
    match /posts/{postId} {
      allow read;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.authorId;
      allow update: if request.auth != null;
      allow delete: if request.auth != null && request.auth.uid == resource.data.authorId;

      // Reviews subcollection rules
      match /reviews/{reviewId} {
        allow read;
        allow create: if request.auth != null;
      }
      
      // Ogrim Pre-orders subcollection
      match /preorders/{preorderId} {
        allow read, list, create;
      }
    }
    
    // Allow anyone to read from finditItems collection
    match /finditItems/{itemId} {
      allow read;
      allow create: if request.auth != null;
      allow delete: if request.auth != null && request.auth.uid == resource.data.authorId;
    }

    // Rules for Office Express Gigs
    match /gigs/{gigId} {
      allow get, list;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.sellerId;
    }
    
    // Legacy rules for Ogrim Pre-orders (for any old data)
    match /ogrim-products/{productId} {
      allow get, list;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.sellerId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.sellerId;

      match /preorders/{preorderId} {
        allow read, list, create;
      }
    }
    
    // Rules for Chat
    match /chats/{chatId} {
      allow get, list, update: if request.auth.uid in resource.data.participants;
      allow create: if request.auth != null && request.auth.uid in request.resource.data.participants;
      
      match /messages/{messageId} {
          allow read, create: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
      }
    }

    // Allow anyone to read the general course info
    match /courseAdmin/{courseId} {
        allow read;
        allow update: if isAdmin();
    }
    
    // Allow users to register for the free class
    match /think_free_class_registrations/{registrationId} {
        allow create;
        allow read: if request.auth != null;
    }

    match /giftCodes/{codeId} {
      allow read, update: if request.auth != null;
    }
    
    match /thinkCodes/{codeId} {
      allow read, update: if request.auth != null;
    }

    match /bloodRequests/{requestId} {
      allow read;
      allow create: if request.auth != null;
      allow delete: if request.auth != null && request.auth.uid == resource.data.authorId;
    }

    match /users/{userId}/notifications/{notificationId} {
        allow read, write, list: if request.auth != null && request.auth.uid == userId;
    }

    match /users/{userId}/giveawayHistory/{historyId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow create: if isAdmin();
    }
  }
}
