
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check for admin privileges
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // `users` collection:
    // read: Anyone can read public user profiles.
    // create: Anyone can create their own user document during signup.
    // update: A user can only update their own profile.
    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId || isAdmin();
    }
    
    // `usernames` collection (for ensuring unique usernames):
    // read: Anyone can check if a username exists.
    // create: A user can claim a username if it doesn't exist.
    match /usernames/{username} {
        allow read;
        allow create: if request.auth.uid != null;
    }

    // `posts` collection (used for products, feed posts, etc.):
    // read: Anyone can read public posts, but only the author can read their private posts.
    // create: Any authenticated user can create a post.
    // update: An author can update their own post. Any authenticated user can react/comment.
    // delete: An author can delete their own post. Admins can delete any post.
    match /posts/{postId} {
      allow read: if resource.data.isPrivate == false || resource.data.authorId == request.auth.uid;
      allow create: if request.auth.uid != null;
      allow update: if request.auth.uid != null;
      allow delete: if request.auth.uid == resource.data.authorId || isAdmin();

      // `reviews` subcollection:
      // read: Anyone can read reviews.
      // create: Any authenticated user can create a review.
      match /reviews/{reviewId} {
        allow read: if true;
        allow create: if request.auth.uid != null;
      }
      
      // `preorders` subcollection:
      // read: Only the product owner can read preorder data.
      // create: Anyone can create a preorder.
      match /preorders/{preorderId} {
        allow read: if get(/databases/$(database)/documents/posts/$(postId)).data.authorId == request.auth.uid;
        allow create: if true;
      }
    }
    
    // `chats` collection:
    // read/write: Only participants of the chat can access it.
    match /chats/{chatId} {
      allow read, write: if request.auth.uid in resource.data.participants;
      
      // `messages` subcollection:
      // read/write: Only participants of the parent chat can access messages.
      match /messages/{messageId} {
          allow read, write: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
      }
    }
    
    // `giftCodes` and `thinkCodes`:
    // read: Any authenticated user can check if a code exists.
    // create/update: Only admins can manage codes.
    match /giftCodes/{codeId} {
        allow read: if request.auth.uid != null;
        allow create, update: if isAdmin();
    }

    match /thinkCodes/{codeId} {
        allow read: if request.auth.uid != null;
        allow create, update: if isAdmin();
    }
    
    // `courseAdmin` settings:
    // read: Anyone can read course details.
    // write: Only admins can update course details.
    match /courseAdmin/{courseId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    // `think_free_class_registrations`:
    // read: Admins can read the list of registrations.
    // create: Anyone can register.
    match /think_free_class_registrations/{regId} {
        allow read: if isAdmin();
        allow create: if true;
    }

    // `finditItems`:
    // read: Anyone can see lost and found items.
    // create: Anyone can report an item.
    // delete: Only the author of the report can delete it.
    match /finditItems/{itemId} {
      allow read: if true;
      allow create: if true;
      allow delete: if request.auth.uid == resource.data.authorId;
    }
    
    // `gigs`:
    // read: Anyone can see gigs.
    // create/update/delete: Only admins (for now, should be seller)
    match /gigs/{gigId} {
      allow read: if true;
      allow create: if request.auth.uid != null;
      allow update, delete: if request.auth.uid == resource.data.sellerId || isAdmin();
    }
    
    // `admins`:
    // read/write: Only other admins can manage the admin list.
    match /admins/{adminId} {
      allow read, write: if isAdmin();
    }
  }
}
