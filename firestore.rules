rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Helper function to check if a user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }

    // Users can read their own document and public profiles.
    // They can only create and update their own document.
    match /users/{userId} {
      allow read;
      allow create, update: if request.auth.uid == userId;
    }
    
    // Usernames are public to read to check for uniqueness, but only the system can create them.
    match /usernames/{username} {
        allow read;
        allow create: if isSignedIn();
    }

    // Admins can read and write to the admins collection.
    match /admins/{adminId} {
        allow read, write: if isAdmin();
    }

    // Posts can be read by anyone if they are not private.
    // If private, only the author can read.
    // Authenticated users can create posts.
    // Users can only update/delete their own posts.
    match /posts/{postId} {
      allow read: if resource.data.isPrivate == false || resource.data.authorId == request.auth.uid;
      allow create: if isSignedIn();
      allow update, delete: if request.auth.uid == resource.data.authorId || isAdmin();

      // Rules for subcollections of posts
      match /reviews/{reviewId} {
        allow read;
        allow create: if isSignedIn();
        allow update, delete: if request.auth.uid == resource.data.authorId || isAdmin();
      }
      match /preorders/{preorderId} {
        allow read, create: if isSignedIn();
      }
    }
    
    // Chats can only be accessed by participants.
    match /chats/{chatId} {
      allow read, write: if request.auth.uid in resource.data.participants;
      
      match /messages/{messageId} {
        allow read, write: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
      }
    }

    // Gigs are public to read. Only authenticated users can create.
    // Only the seller can update/delete their own gig.
    match /gigs/{gigId} {
        allow read;
        allow create: if isSignedIn();
        allow update, delete: if request.auth.uid == resource.data.sellerId || isAdmin();
    }

    // Findit items are public to read. Authenticated users can create/update/delete their own items.
    match /finditItems/{itemId} {
      allow read;
      allow create: if isSignedIn();
      allow update, delete: if request.auth.uid == resource.data.authorId || isAdmin();
    }
    
    // Blood requests are public. Authenticated users can create/delete their own.
    match /bloodRequests/{requestId} {
      allow read;
      allow create: if isSignedIn();
      allow delete: if request.auth.uid == resource.data.authorId || isAdmin();
    }
    
    // Course Admin settings can be read by anyone but only written by admins.
    match /courseAdmin/{courseId} {
        allow read;
        allow write: if isAdmin();
    }
    
    // Registrations can be created by anyone, but only read by admins.
    match /think_free_class_registrations/{registrationId} {
      allow create;
      allow read, write, delete: if isAdmin();
    }
    
    // Gift codes can only be managed by admins.
    match /giftCodes/{codeId} {
      allow read, write: if isSignedIn();
    }
    
    // Think codes can only be managed by admins.
    match /thinkCodes/{codeId} {
       allow read, write: if isSignedIn();
    }
  }
}
