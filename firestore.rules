rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isUserProfile(userId) {
      return isUserAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isUserAuthenticated() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    match /users/{userId} {
      allow read: if isUserAuthenticated();
      allow create: if !isUserAuthenticated() || isUserProfile(userId);
      // Admins can update any user profile (e.g., to add credits)
      allow update: if isUserProfile(userId) || isAdmin();
      allow delete: if isUserProfile(userId);
    }
    
    match /usernames/{username} {
      allow read: if true;
      allow create: if isUserAuthenticated();
    }

    match /posts/{postId} {
      allow read: if true;
      allow create: if isUserAuthenticated();
      allow update, delete: if isUserAuthenticated() && (resource.data.authorId == request.auth.uid || isAdmin());
    }
    
    match /posts/{postId}/reviews/{reviewId} {
        allow read: if true;
        allow create: if isUserAuthenticated();
    }
    
    match /posts/{postId}/preorders/{preorderId} {
        allow read: if true;
        allow create: if true; // Allow anyone to pre-order
    }
    
    match /giftCodes/{codeId} {
      allow read, update: if isUserAuthenticated();
      allow create: if isAdmin();
      // Admins need to be able to list all gift codes
      allow list: if isAdmin();
    }
    
    match /thinkCodes/{codeId} {
      allow read, update: if isUserAuthenticated();
      allow create: if isAdmin();
    }

    match /courseAdmin/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /admins/{adminId} {
      allow read, list: if isUserAuthenticated();
      // Allow user to become first admin
      allow create: if request.auth.token.email == 'tamimiqbal.fysal@gmail.com' && request.auth.uid == adminId;
      // Only other admins can add/remove admins
      allow write: if isAdmin();
    }
    
    match /users/{userId}/notifications/{notificationId} {
        allow read, write: if isUserProfile(userId);
    }
    
    match /users/{userId}/giveawayHistory/{giveawayId} {
        allow read: if isUserProfile(userId);
        // Admins need to be able to write history for other users
        allow create: if isAdmin();
    }

    match /gigs/{gigId} {
        allow read: if true;
        allow create: if isUserAuthenticated();
        allow update, delete: if isUserAuthenticated() && resource.data.sellerId == request.auth.uid;
    }

    match /chats/{chatId} {
        allow read, write: if isUserAuthenticated() && request.auth.uid in resource.data.participants;
        allow list: if isUserAuthenticated();
    }

    match /chats/{chatId}/messages/{messageId} {
        allow read, write: if isUserAuthenticated() && get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
    }
    
     match /finditItems/{itemId} {
      allow read: if true;
      allow create: if isUserAuthenticated();
      allow delete: if isUserAuthenticated() && resource.data.authorId == request.auth.uid;
    }
    
    match /bloodRequests/{requestId} {
        allow read: if true;
        allow create: if isUserAuthenticated();
        allow delete: if isUserAuthenticated() && resource.data.authorId == request.auth.uid;
    }
  }
}
