
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      // Check if the requesting user's UID exists in the /admins collection.
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // Admins can manage all user data, including distributing credits.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == userId;
      allow update(data): if request.auth.uid == userId
                          || (isAdmin() && 'credits' in data);
    }

    match /users/{userId}/giveawayHistory/{historyId} {
      allow read: if request.auth.uid == userId;
      // Only admins can create giveaway history records for other users.
      allow create: if isAdmin();
      // Allow users to delete their own history if needed in the future.
      allow delete: if request.auth.uid == userId;
    }
    
    // Admins can read the full list of gift codes to calculate shares.
    match /giftCodes/{codeId} {
        allow read: if request.auth != null;
        allow update: if request.auth != null;
        // Only admins can create or delete gift codes.
        allow create, delete: if isAdmin();
    }
    
    // Admins can manage admin roles.
    match /admins/{adminId} {
        allow read, write, delete: if isAdmin();
    }

    // General Rules from here on
    match /usernames/{username} {
      allow read;
      allow create: if request.auth != null;
    }

    match /posts/{postId} {
      allow read: if resource.data.isPrivate == false || (request.auth != null && request.auth.uid == resource.data.authorId);
      allow create: if request.auth != null;
      allow update: if request.auth != null && (request.auth.uid == resource.data.authorId || isAdmin());
      allow delete: if request.auth != null && (request.auth.uid == resource.data.authorId || isAdmin());
      
      match /reviews/{reviewId} {
        allow read;
        allow create: if request.auth != null;
      }

      match /preorders/{preorderId} {
        allow read;
        allow create: if request.auth != null;
      }
    }
    
    match /thinkCodes/{codeId} {
        allow read, update: if request.auth != null;
        allow create, delete: if isAdmin();
    }
    
    match /courseAdmin/{courseId} {
      allow read;
      allow write: if isAdmin();
    }

    match /chats/{chatId} {
      allow read, write: if request.auth != null && request.auth.uid in resource.data.participants;
      match /messages/{messageId} {
        allow read, write: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
      }
    }

    match /finditItems/{itemId} {
        allow read;
        allow create: if request.auth != null;
        allow delete: if request.auth != null && request.auth.uid == resource.data.authorId;
    }
    
     match /gigs/{gigId} {
        allow read;
        allow create: if request.auth != null;
     }

     match /think_free_class_registrations/{registrationId} {
        allow read, create;
     }
  }
}
