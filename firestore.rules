rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Global Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      // Check if the requesting user's UID exists in the /admins collection
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Admins can read/write anything
    match /{path=**} {
      allow read, write: if isAdmin();
    }

    // User Data
    match /users/{userId} {
      allow read: if isSignedIn();
      // Allow user creation (signup)
      // Allow owner to update their own profile
      allow write: if isOwner(userId);
    }
    
    match /users/{userId}/{subcollection}/{docId} {
        // Allow users to manage their own subcollections (e.g., notifications, history)
        allow read, write, delete: if isOwner(userId);
    }

    // Usernames for uniqueness
    match /usernames/{username} {
      allow read: if true;
      // Only allow creating a username doc if the user is signed in
      // and the username matches the one in their user document.
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
    }

    // Posts, products, etc.
    match /posts/{postId} {
        // Allow anyone to read non-private posts
        allow read: if resource.data.isPrivate == false || isOwner(resource.data.authorId);
        
        // Allow signed-in users to create posts and owners to update/delete them
        allow create: if isSignedIn();
        allow update, delete: if isOwner(resource.data.authorId);

        // Allow signed-in users to manage subcollections like reviews
        match /{subcollection}/{docId} {
            allow read, create, update, delete: if isSignedIn();
        }
    }
    
    // Gift and Think Codes
    match /giftCodes/{codeId} {
        allow read, update: if isSignedIn();
    }
    match /thinkCodes/{codeId} {
        allow read, update: if isSignedIn();
    }
    
    // Course Admin settings
    match /courseAdmin/{courseId} {
        allow read: if true;
        allow write: if false; // Should only be editable by admins (covered by admin rule)
    }

    // Gigs for Office Express
    match /gigs/{gigId} {
        allow read: if true;
        allow create: if isSignedIn();
        allow update, delete: if isOwner(resource.data.sellerId);
    }
    
    // Findit Items
    match /finditItems/{itemId} {
      allow read: if true;
      allow create: if true; // Allow anonymous reports
      allow delete: if resource.data.authorId == null || isOwner(resource.data.authorId);
    }

    // Chat
    match /chats/{chatId} {
      // Users can only access chats they are a part of
      allow read, write: if request.auth.uid in resource.data.participants;
      
      match /messages/{messageId} {
        // Participants can read/write messages in their chat
        allow read, write: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
      }
    }

    // Blood Requests
    match /bloodRequests/{reqId} {
        allow read: if true;
        allow create: if isSignedIn();
        allow delete: if isOwner(resource.data.authorId);
    }
  }
}
